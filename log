datasets/criteo_lr/get_slot_data.py:15:import paddle.fluid.incubate.data_generator as dg
datasets/criteo_dcn_v2/get_slot_data.py:17:import paddle.fluid.incubate.data_generator as dg
datasets/criteo_dcn_v2/get_slot_data.py:23:import paddle.fluid.incubate.data_generator as dg
datasets/census/data_preparation.py:17:import paddle.fluid as fluid
doc/fleet_mode.md:78:如果需要数据集样本不会重复，可通过paddle.distributed.get_rank()函数获取当前使用的第几张卡，paddle.distributed.get_world_size()函数获取使用的总卡数。并在reader文件中自行添加逻辑划分各子进程的数据。[paddle.io.IterableDataset](https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/fluid/dataloader/dataset/IterableDataset_cn.html#iterabledataset)的相关信息以及划分数据的示例可以点击这里获取。
doc/fleet_mode.md:158:          emb = paddle.fluid.contrib.sparse_embedding(
doc/source/paddlerec/fleet_mode.md:78:如果需要数据集样本不会重复，可通过paddle.distributed.get_rank()函数获取当前使用的第几张卡，paddle.distributed.get_world_size()函数获取使用的总卡数。并在reader文件中自行添加逻辑划分各子进程的数据。[paddle.io.IterableDataset](https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/fluid/dataloader/dataset/IterableDataset_cn.html#iterabledataset)的相关信息以及划分数据的示例可以点击这里获取。
doc/source/paddlerec/fleet_mode.md:158:          emb = paddle.fluid.contrib.sparse_embedding(
doc/source/paddlerec/contribute.md:79:Tips2: 由于net.py中是动态图和静态图通用组网，所以要求使用的API必须是2.0以后的API, 同时不能出现fluid 旧的字样
doc/source/models/rank/dcn.md:86:- 我们同时还会计算预测的auc，auc的结果由`fluid.layers.auc()`给出，该层的返回值有三个，分别是全局auc: `auc_var`，当前batch的auc: `batch_auc_var`，以及auc_states: `_`，auc_states包含了`batch_stat_pos, batch_stat_neg, stat_pos, stat_neg`信息。
doc/contribute.md:81:Tips2: 由于net.py中是动态图和静态图通用组网，所以要求使用的API必须是2.0以后的API, 同时不能出现fluid 旧的字样
models/rank/sign/graph.py:918:        assert isinstance(feature, paddle.Tensor) or isinstance(feature, paddle.fluid.framework.Variable), \
models/rank/bert4rec/net.py:246:        if out_dtype == paddle.fluid.core.VarDesc.VarType.FP16:
models/rank/bert4rec/net.py:249:        if out_dtype == paddle.fluid.core.VarDesc.VarType.FP16:
models/rank/bert4rec/net.py:272:        if out_dtype == paddle.fluid.core.VarDesc.VarType.FP16:
models/rank/bert4rec/net.py:275:        if out_dtype == paddle.fluid.core.VarDesc.VarType.FP16:
models/rank/bert4rec/net.py:304:        if out_dtype == paddle.fluid.core.VarDesc.VarType.FP16:
models/rank/bert4rec/net.py:307:        if out_dtype == paddle.fluid.core.VarDesc.VarType.FP16:
models/rank/bert4rec/dygraph_model.py:123:                paddle.fluid.layers.gather(prediction[
models/rank/naml/net.py:19:import paddle.fluid as fluid
models/rank/deepfm/static_model.py:84:        auc, batch_auc_var, _ = paddle.fluid.layers.auc(input=predict_2d,
models/rank/dataset/Criteo_data/get_slot_data.py:16:import paddle.fluid.incubate.data_generator as dg
models/rank/deepfefm/static_model.py:84:        auc, batch_auc_var, _ = paddle.fluid.layers.auc(input=predict_2d,
models/rank/dlrm/static_model.py:101:        auc, batch_auc_var, _ = paddle.fluid.layers.auc(input=predict_2d,
models/rank/dien/net.py:523:        self.rnn = paddle.fluid.layers.StaticRNN(name="attention_evolution")
models/rank/slot_dnn/net.py:19:import paddle.fluid as fluid
models/rank/slot_dnn/net.py:72:            bow = paddle.fluid.layers.sequence_pool(input=emb, pool_type='sum')
models/rank/slot_dnn/net.py:74:            #paddle.fluid.layers.Print(bow)
models/rank/slot_dnn/static_model.py:17:import paddle.fluid as fluid
models/rank/slot_dnn/static_model.py:81:        metric_list = fluid.contrib.layers.ctr_metric_bundle(
models/rank/slot_dnn/static_model.py:83:            fluid.layers.cast(
models/rank/gatenet/data/get_slot_data.py:15:import paddle.fluid.incubate.data_generator as dg
models/rank/dcn/README.md:100:- 我们同时还会计算预测的auc，auc的结果由`fluid.layers.auc()`给出，该层的返回值有三个，分别是全局auc: `auc_var`，当前batch的auc: `batch_auc_var`，以及auc_states: `_`，auc_states包含了`batch_stat_pos, batch_stat_neg, stat_pos, stat_neg`信息。
models/rank/dcn/static_model.py:92:        auc, batch_auc_var, _ = paddle.fluid.layers.auc(input=predict_2d,
models/rank/dnn/net.py:72:                emb = paddle.fluid.contrib.sparse_embedding(
models/rank/dnn/net.py:78:                emb = paddle.fluid.layers.continuous_value_model(
models/rank/dnn/static_model_lod.py:73:                emb = fluid.contrib.layers.sparse_embedding(
models/rank/dnn/static_model_lod.py:78:                    param_attr=fluid.ParamAttr(
models/rank/dnn/static_model_lod.py:80:                        initializer=fluid.initializer.Uniform()))
models/rank/dnn/static_model_lod.py:84:                emb = paddle.fluid.layers.embedding(
models/rank/dnn/static_model_lod.py:91:                    param_attr=paddle.fluid.ParamAttr(
models/rank/dnn/static_model_lod.py:93:                        initializer=paddle.fluid.initializer.Uniform()))
models/rank/dnn/static_model_lod.py:94:            emb_sum = paddle.fluid.layers.sequence_pool(
models/rank/dnn/static_model.py:87:        ones = paddle.fluid.layers.fill_constant_batch_size_like(
models/contentunderstanding/tagspace/net.py:21:import paddle.fluid as fluid
models/demo/movie_recommand/utils/static_ps/infer.py:106:            paddle.fluid.io.load_inference_model(
models/demo/movie_recommand/utils/utils_single.py:139:        param = paddle.fluid.global_scope().var(name)
models/treebased/tdm/get_leaf_embedding.py:16:import paddle.fluid as fluid
models/treebased/tdm/get_leaf_embedding.py:27:    all_nodes = fluid.layers.data(
models/treebased/tdm/get_leaf_embedding.py:33:    output = fluid.layers.embedding(
models/treebased/tdm/get_leaf_embedding.py:37:        param_attr=fluid.ParamAttr(
models/treebased/tdm/get_leaf_embedding.py:39:            initializer=paddle.fluid.initializer.UniformInitializer()))
models/treebased/tdm/get_leaf_embedding.py:41:    place = fluid.CPUPlace()
models/treebased/tdm/get_leaf_embedding.py:42:    exe = fluid.Executor(place)
models/treebased/tdm/get_leaf_embedding.py:44:    exe.run(fluid.default_startup_program())
models/treebased/tdm/get_leaf_embedding.py:46:        #fluid.io.load_persistables(exe, init_model_path)
models/treebased/tdm/get_leaf_embedding.py:50:    return np.array(fluid.global_scope().find_var("tdm.bw_emb.weight")
models/treebased/tdm/model.py:17:import paddle.fluid as fluid
models/treebased/tdm/model.py:62:                bias_attr=fluid.ParamAttr(name="relu.b" + str(idx)))
models/treebased/tdm/model.py:72:            initializer=paddle.fluid.initializer.NormalInitializer(seed=1)),
models/treebased/tdm/model.py:73:        bias_attr=fluid.ParamAttr(
models/treebased/tdm/model.py:75:            initializer=paddle.fluid.initializer.ConstantInitializer(
models/treebased/tdm/model.py:80:    #hiddens_ = paddle.fluid.layers.dropout(hiddens_, 0.1, seed=1)
models/treebased/tdm/model.py:85:        weight_attr=paddle.fluid.ParamAttr(
models/treebased/tdm/model.py:87:            initializer=paddle.fluid.initializer.NormalInitializer(seed=1)),
models/treebased/tdm/model.py:88:        bias_attr=fluid.ParamAttr(
models/treebased/tdm/model.py:90:            initializer=paddle.fluid.initializer.ConstantInitializer(
models/treebased/tdm/model_infer.py:17:import paddle.fluid as fluid
models/treebased/tdm/model_infer.py:60:                bias_attr=fluid.ParamAttr(name="relu.b" + str(idx)))
models/treebased/tdm/model_infer.py:67:                                   bias_attr=fluid.ParamAttr(name="relu.b"))
models/treebased/tdm/model_infer.py:75:        bias_attr=fluid.ParamAttr(name="cos_sim.b"))
models/treebased/tdm/static_model.py:80:            weight_attr=paddle.fluid.ParamAttr(
models/treebased/tdm/static_model.py:82:                initializer=paddle.fluid.initializer.NormalInitializer(
models/treebased/tdm/static_model.py:84:            bias_attr=paddle.fluid.ParamAttr(
models/treebased/tdm/static_model.py:86:                initializer=paddle.fluid.initializer.ConstantInitializer(
models/treebased/tdm/infer.py:19:import paddle.fluid as fluid
models/treebased/tdm/infer.py:195:    exe = paddle.static.Executor(fluid.CPUPlace())
models/treebased/tdm/infer.py:199:    #fluid.io.load_persistables(exe, dirname=init_model_path)
models/treebased/jtm/tree_learning.py:17:import paddle.fluid as fluid
models/treebased/jtm/tree_learning.py:18:from paddle.fluid.framework import Program
models/treebased/jtm/user_preference.py:17:import paddle.fluid as fluid
models/treebased/jtm/user_preference.py:24:from paddle.fluid.framework import Program
models/treebased/jtm/user_preference.py:30:        self.place = fluid.CPUPlace()
models/treebased/jtm/user_preference.py:31:        self.exe = fluid.Executor(self.place)
models/treebased/jtm/user_preference.py:95:        with paddle.fluid.framework.program_guard(
models/treebased/jtm/user_preference.py:97:            all_nodes = fluid.layers.data(
models/treebased/jtm/user_preference.py:103:            output = fluid.layers.embedding(
models/treebased/jtm/user_preference.py:107:                param_attr=fluid.ParamAttr(
models/treebased/jtm/user_preference.py:109:                    initializer=paddle.fluid.initializer.UniformInitializer()))
models/treebased/jtm/user_preference.py:118:        with paddle.fluid.framework.program_guard(self.prediction_model,
models/treebased/jtm/user_preference.py:121:                fluid.layers.data(
models/treebased/jtm/user_preference.py:126:            unit_id_emb = fluid.layers.data(
models/recall/word2vec/utils/static_ps/infer.py:101:            paddle.fluid.io.load_inference_model(
models/recall/word2vec/utils/utils_single.py:139:        param = paddle.fluid.global_scope().var(name)
models/recall/word2vec/static_model.py:99:        #            learning_rate=paddle.fluid.layers.exponential_decay(
models/recall/word2vec/benchmark/w2v_infer.py:24:import paddle.fluid as fluid
models/recall/word2vec/benchmark/w2v_infer.py:67:    analogy_a = fluid.data(name="analogy_a", shape=[None], dtype='int64')
models/recall/word2vec/benchmark/w2v_infer.py:68:    analogy_b = fluid.data(name="analogy_b", shape=[None], dtype='int64')
models/recall/word2vec/benchmark/w2v_infer.py:69:    analogy_c = fluid.data(name="analogy_c", shape=[None], dtype='int64')
models/recall/word2vec/benchmark/w2v_infer.py:70:    all_label = fluid.data(name="all_label", shape=[vocab_size], dtype='int64')
models/recall/word2vec/benchmark/w2v_infer.py:72:    emb_all_label = fluid.embedding(
models/recall/word2vec/benchmark/w2v_infer.py:78:    emb_a = fluid.embedding(
models/recall/word2vec/benchmark/w2v_infer.py:83:    emb_b = fluid.embedding(
models/recall/word2vec/benchmark/w2v_infer.py:88:    emb_c = fluid.embedding(
models/recall/word2vec/benchmark/w2v_infer.py:95:        emb_all_label = fluid.layers.cast(emb_all_label, "float32")
models/recall/word2vec/benchmark/w2v_infer.py:96:        emb_a = fluid.layers.cast(emb_a, "float32")
models/recall/word2vec/benchmark/w2v_infer.py:97:        emb_b = fluid.layers.cast(emb_b, "float32")
models/recall/word2vec/benchmark/w2v_infer.py:98:        emb_c = fluid.layers.cast(emb_c, "float32")
models/recall/word2vec/benchmark/w2v_infer.py:100:    target = fluid.layers.elementwise_add(
models/recall/word2vec/benchmark/w2v_infer.py:101:        fluid.layers.elementwise_sub(emb_b, emb_a), emb_c)
models/recall/word2vec/benchmark/w2v_infer.py:103:    emb_all_label_l2 = fluid.layers.l2_normalize(x=emb_all_label, axis=1)
models/recall/word2vec/benchmark/w2v_infer.py:104:    dist = fluid.layers.matmul(x=target, y=emb_all_label_l2, transpose_y=True)
models/recall/word2vec/benchmark/w2v_infer.py:105:    values, pred_idx = fluid.layers.topk(input=dist, k=4)
models/recall/word2vec/benchmark/w2v_infer.py:129:    place = fluid.CUDAPlace(0) if use_cuda else fluid.CPUPlace()
models/recall/word2vec/benchmark/w2v_infer.py:130:    exe = fluid.Executor(place)
models/recall/word2vec/benchmark/w2v_infer.py:138:    with fluid.scope_guard(fluid.Scope()):
models/recall/word2vec/benchmark/w2v_infer.py:139:        main_program = fluid.Program()
models/recall/word2vec/benchmark/w2v_infer.py:140:        with fluid.program_guard(main_program):
models/recall/word2vec/benchmark/w2v_infer.py:145:                fluid.io.load_vars(
models/recall/word2vec/benchmark/w2v_infer.py:210:    reader = fluid.io.batch(test(file_dir, w2i), batch_size)
models/recall/word2vec/benchmark/w2v_infer.py:225:            fluid.require_version('1.7.0')
models/recall/word2vec/benchmark/w2v_infer.py:227:            fluid.require_version('1.6.0')
models/recall/word2vec/benchmark/benchmark_reader.py:19:import paddle.fluid as fluid
models/recall/word2vec/benchmark/benchmark_reader.py:146:                            t = fluid.Tensor()
models/recall/word2vec/benchmark/benchmark_reader.py:152:                            t.set(dat, fluid.CPUPlace())
models/recall/word2vec/benchmark/benchmark_reader.py:157:                            tt = fluid.Tensor()
models/recall/word2vec/benchmark/benchmark_reader.py:164:                                fluid.CPUPlace())
models/recall/word2vec/benchmark/static_model.py:17:import paddle.fluid as fluid
models/recall/word2vec/benchmark/static_model.py:72:        input_emb = fluid.layers.embedding(
models/recall/word2vec/benchmark/static_model.py:76:            param_attr=fluid.ParamAttr(
models/recall/word2vec/benchmark/static_model.py:78:                initializer=fluid.initializer.Uniform(-init_width,
models/recall/word2vec/benchmark/static_model.py:81:        true_emb_w = fluid.layers.embedding(
models/recall/word2vec/benchmark/static_model.py:85:            param_attr=fluid.ParamAttr(
models/recall/word2vec/benchmark/static_model.py:87:                initializer=fluid.initializer.Constant(value=0.0)))
models/recall/word2vec/benchmark/static_model.py:89:        true_emb_b = fluid.layers.embedding(
models/recall/word2vec/benchmark/static_model.py:93:            param_attr=fluid.ParamAttr(
models/recall/word2vec/benchmark/static_model.py:95:                initializer=fluid.initializer.Constant(value=0.0)))
models/recall/word2vec/benchmark/static_model.py:97:        neg_word_reshape = fluid.layers.reshape(inputs[2], shape=[-1, 1])
models/recall/word2vec/benchmark/static_model.py:100:        neg_emb_w = fluid.layers.embedding(
models/recall/word2vec/benchmark/static_model.py:104:            param_attr=fluid.ParamAttr(
models/recall/word2vec/benchmark/static_model.py:107:        neg_emb_w_re = fluid.layers.reshape(
models/recall/word2vec/benchmark/static_model.py:110:        neg_emb_b = fluid.layers.embedding(
models/recall/word2vec/benchmark/static_model.py:114:            param_attr=fluid.ParamAttr(
models/recall/word2vec/benchmark/static_model.py:117:        neg_emb_b_vec = fluid.layers.reshape(
models/recall/word2vec/benchmark/static_model.py:120:        true_logits = fluid.layers.elementwise_add(
models/recall/word2vec/benchmark/static_model.py:121:            fluid.layers.reduce_sum(
models/recall/word2vec/benchmark/static_model.py:122:                fluid.layers.elementwise_mul(input_emb, true_emb_w),
models/recall/word2vec/benchmark/static_model.py:127:        input_emb_re = fluid.layers.reshape(
models/recall/word2vec/benchmark/static_model.py:130:        neg_matmul = fluid.layers.matmul(
models/recall/word2vec/benchmark/static_model.py:132:        neg_matmul_re = fluid.layers.reshape(
models/recall/word2vec/benchmark/static_model.py:134:        neg_logits = fluid.layers.elementwise_add(neg_matmul_re, neg_emb_b_vec)
models/recall/word2vec/benchmark/static_model.py:137:        label_ones = fluid.layers.fill_constant_batch_size_like(
models/recall/word2vec/benchmark/static_model.py:139:        label_zeros = fluid.layers.fill_constant_batch_size_like(
models/recall/word2vec/benchmark/static_model.py:142:        true_xent = fluid.layers.sigmoid_cross_entropy_with_logits(true_logits,
models/recall/word2vec/benchmark/static_model.py:144:        neg_xent = fluid.layers.sigmoid_cross_entropy_with_logits(neg_logits,
models/recall/word2vec/benchmark/static_model.py:146:        cost = fluid.layers.elementwise_add(
models/recall/word2vec/benchmark/static_model.py:147:            fluid.layers.reduce_sum(
models/recall/word2vec/benchmark/static_model.py:149:            fluid.layers.reduce_sum(
models/recall/word2vec/benchmark/static_model.py:151:        avg_cost = fluid.layers.reduce_mean(cost)
models/recall/word2vec/benchmark/static_model.py:168:        optimizer = fluid.optimizer.SGD(
models/recall/word2vec/benchmark/static_model.py:169:            learning_rate=fluid.layers.exponential_decay(
models/recall/word2vec/benchmark/static_model.py:181:                optimizer = fluid.optimizer.SGD(
models/recall/word2vec/benchmark/static_model.py:182:                    learning_rate=fluid.layers.exponential_decay(
models/recall/word2vec/benchmark/static_model.py:193:                optimizer = fluid.optimizer.SGD(scheduler)
tools/dataset/README.MD:126:dense_input = fluid.layers.data(name="dense_input",
tools/dataset/README.MD:131:   fluid.layers.data(name="C" + str(i),
tools/dataset/README.MD:137:label = fluid.layers.data(name="label", shape=[1], dtype="int64")
tools/static_ps_trainer.py:169:                    paddle.fluid.io.save_inference_model(
tools/static_ps_offline_infer.py:28:import paddle.fluid as fluid
tools/static_ps_offline_infer.py:99:        dataset = fluid.DatasetFactory().create_dataset("InMemoryDataset")
tools/utils/static_ps/flow_helper.py:29:import paddle.fluid as fluid
tools/utils/static_ps/metric_helper.py:23:import paddle.fluid as fluid
tools/utils/static_ps/metric_helper.py:35:def get_global_auc(scope=fluid.global_scope(),
tools/utils/static_ps/metric_helper.py:42:            scope(Scope): Scope object, default is fluid.global_scope()
tools/utils/static_ps/metric_helper.py:103:def get_global_metrics(scope=fluid.global_scope(),
tools/utils/static_ps/metric_helper.py:262:             scope=fluid.global_scope(),
tools/utils/static_ps/metric_helper.py:263:             place=fluid.CPUPlace(),
tools/utils/static_ps/metric_helper.py:270:        scope(Scope): Scope object, default is fluid.global_scope()
tools/utils/static_ps/metric_helper.py:271:        place(Place): Place object, default is fluid.CPUPlace()
tools/utils/static_ps/time_helper.py:23:import paddle.fluid as fluid
tools/utils/static_ps/infer.py:108:            paddle.fluid.io.load_inference_model(
tools/static_ps_online_trainer.py:31:import paddle.fluid as fluid
tools/static_ps_online_trainer.py:149:        dataset = fluid.DatasetFactory().create_dataset(self.reader_type)
tools/static_ps_online_trainer.py:191:        dataset = fluid.DatasetFactory().create_dataset(self.reader_type)
tools/static_ps_online_trainer.py:315:                    metric_str = get_global_metrics_str(fluid.global_scope(),
tools/static_ps_online_trainer.py:319:                    clear_metrics(fluid.global_scope(), self.metric_list,
tools/static_ps_online_trainer.py:343:                metric_str = get_global_metrics_str(fluid.global_scope(),
tools/static_ps_online_trainer.py:347:                clear_metrics(fluid.global_scope(), self.metric_list,
tools/static_gpubox_trainer.py:29:from paddle.fluid.incubate.fleet.utils.fleet_util import FleetUtil
tools/static_gpubox_trainer.py:124:        self.PSGPU = paddle.fluid.core.PSGPU()
tools/static_gpubox_trainer.py:131:        opt_info = paddle.fluid.default_main_program()._fleet_opt
tools/static_gpubox_trainer.py:157:                                 paddle.fluid.global_scope(), fleet.util)
tools/static_gpubox_trainer.py:160:                                    paddle.fluid.global_scope())
tools/static_gpubox_trainer.py:162:                                    paddle.fluid.global_scope())
tools/static_gpubox_trainer.py:164:                                    paddle.fluid.global_scope())
tools/static_gpubox_trainer.py:166:                                    paddle.fluid.global_scope())
tools/static_gpubox_trainer.py:264:            except paddle.fluid.core.EOFException:
Binary file tools/inference/model/rec_inference.pdmodel matches
Binary file tools/inference/model/pruned_inference.pdmodel matches
tools/inference/go/benchmark.go:14:	pd "github.com/paddlepaddle/paddle/paddle/fluid/inference/goapi"
tools/inference/go/README.MD:6:[link](https://github.com/PaddlePaddle/Paddle/tree/develop/paddle/fluid/inference/goapi) 安装。
tools/feature_importance.py:30:import paddle.fluid as fluid
tools/feature_importance.py:113:        dataset = fluid.DatasetFactory().create_dataset("InMemoryDataset")
tools/feature_importance.py:175:        baseline_auc = get_global_auc(fluid.global_scope(),
tools/feature_importance.py:178:        clear_metrics(fluid.global_scope(), self.metric_list,
tools/feature_importance.py:195:            clear_metrics(fluid.global_scope(), self.metric_list,
tools/inference_c++/readme.md:25:### step2：下载PaddlePaddle C++ 预测库 fluid_inference
